// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `plugin.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct Job {
    // message fields
    pub unique_id: u32,
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub dependson: ::std::vec::Vec<u32>,
    pub args: ::protobuf::RepeatedField<Argument>,
    pub interaction: ::protobuf::SingularPtrField<ManualInteraction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Job {
    fn default() -> &'a Job {
        <Job as ::protobuf::Message>::default_instance()
    }
}

impl Job {
    pub fn new() -> Job {
        ::std::default::Default::default()
    }

    // uint32 unique_id = 1;


    pub fn get_unique_id(&self) -> u32 {
        self.unique_id
    }
    pub fn clear_unique_id(&mut self) {
        self.unique_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_unique_id(&mut self, v: u32) {
        self.unique_id = v;
    }

    // string title = 2;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // repeated uint32 dependson = 4;


    pub fn get_dependson(&self) -> &[u32] {
        &self.dependson
    }
    pub fn clear_dependson(&mut self) {
        self.dependson.clear();
    }

    // Param is passed by value, moved
    pub fn set_dependson(&mut self, v: ::std::vec::Vec<u32>) {
        self.dependson = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dependson(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.dependson
    }

    // Take field
    pub fn take_dependson(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.dependson, ::std::vec::Vec::new())
    }

    // repeated .proto.Argument args = 5;


    pub fn get_args(&self) -> &[Argument] {
        &self.args
    }
    pub fn clear_args(&mut self) {
        self.args.clear();
    }

    // Param is passed by value, moved
    pub fn set_args(&mut self, v: ::protobuf::RepeatedField<Argument>) {
        self.args = v;
    }

    // Mutable pointer to the field.
    pub fn mut_args(&mut self) -> &mut ::protobuf::RepeatedField<Argument> {
        &mut self.args
    }

    // Take field
    pub fn take_args(&mut self) -> ::protobuf::RepeatedField<Argument> {
        ::std::mem::replace(&mut self.args, ::protobuf::RepeatedField::new())
    }

    // .proto.ManualInteraction interaction = 6;


    pub fn get_interaction(&self) -> &ManualInteraction {
        self.interaction.as_ref().unwrap_or_else(|| ManualInteraction::default_instance())
    }
    pub fn clear_interaction(&mut self) {
        self.interaction.clear();
    }

    pub fn has_interaction(&self) -> bool {
        self.interaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interaction(&mut self, v: ManualInteraction) {
        self.interaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interaction(&mut self) -> &mut ManualInteraction {
        if self.interaction.is_none() {
            self.interaction.set_default();
        }
        self.interaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_interaction(&mut self) -> ManualInteraction {
        self.interaction.take().unwrap_or_else(|| ManualInteraction::new())
    }
}

impl ::protobuf::Message for Job {
    fn is_initialized(&self) -> bool {
        for v in &self.args {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.interaction {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.unique_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.dependson)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.args)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.interaction)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.unique_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.unique_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        for value in &self.dependson {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.args {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.interaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.unique_id != 0 {
            os.write_uint32(1, self.unique_id)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        for v in &self.dependson {
            os.write_uint32(4, *v)?;
        };
        for v in &self.args {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.interaction.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Job {
        Job::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "unique_id",
                    |m: &Job| { &m.unique_id },
                    |m: &mut Job| { &mut m.unique_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "title",
                    |m: &Job| { &m.title },
                    |m: &mut Job| { &mut m.title },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &Job| { &m.description },
                    |m: &mut Job| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "dependson",
                    |m: &Job| { &m.dependson },
                    |m: &mut Job| { &mut m.dependson },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Argument>>(
                    "args",
                    |m: &Job| { &m.args },
                    |m: &mut Job| { &mut m.args },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ManualInteraction>>(
                    "interaction",
                    |m: &Job| { &m.interaction },
                    |m: &mut Job| { &mut m.interaction },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Job>(
                    "Job",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Job {
        static mut instance: ::protobuf::lazy::Lazy<Job> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Job,
        };
        unsafe {
            instance.get(Job::new)
        }
    }
}

impl ::protobuf::Clear for Job {
    fn clear(&mut self) {
        self.unique_id = 0;
        self.title.clear();
        self.description.clear();
        self.dependson.clear();
        self.args.clear();
        self.interaction.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Job {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Job {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Argument {
    // message fields
    pub description: ::std::string::String,
    pub field_type: ::std::string::String,
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Argument {
    fn default() -> &'a Argument {
        <Argument as ::protobuf::Message>::default_instance()
    }
}

impl Argument {
    pub fn new() -> Argument {
        ::std::default::Default::default()
    }

    // string description = 1;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string type = 2;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string key = 3;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string value = 4;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Argument {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.description);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_type);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.description.is_empty() {
            os.write_string(1, &self.description)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(2, &self.field_type)?;
        }
        if !self.key.is_empty() {
            os.write_string(3, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(4, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Argument {
        Argument::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &Argument| { &m.description },
                    |m: &mut Argument| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &Argument| { &m.field_type },
                    |m: &mut Argument| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &Argument| { &m.key },
                    |m: &mut Argument| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &Argument| { &m.value },
                    |m: &mut Argument| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Argument>(
                    "Argument",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Argument {
        static mut instance: ::protobuf::lazy::Lazy<Argument> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Argument,
        };
        unsafe {
            instance.get(Argument::new)
        }
    }
}

impl ::protobuf::Clear for Argument {
    fn clear(&mut self) {
        self.description.clear();
        self.field_type.clear();
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Argument {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Argument {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ManualInteraction {
    // message fields
    pub description: ::std::string::String,
    pub field_type: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ManualInteraction {
    fn default() -> &'a ManualInteraction {
        <ManualInteraction as ::protobuf::Message>::default_instance()
    }
}

impl ManualInteraction {
    pub fn new() -> ManualInteraction {
        ::std::default::Default::default()
    }

    // string description = 1;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string type = 2;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string value = 3;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ManualInteraction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.description);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_type);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.description.is_empty() {
            os.write_string(1, &self.description)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(2, &self.field_type)?;
        }
        if !self.value.is_empty() {
            os.write_string(3, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ManualInteraction {
        ManualInteraction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &ManualInteraction| { &m.description },
                    |m: &mut ManualInteraction| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &ManualInteraction| { &m.field_type },
                    |m: &mut ManualInteraction| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &ManualInteraction| { &m.value },
                    |m: &mut ManualInteraction| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ManualInteraction>(
                    "ManualInteraction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ManualInteraction {
        static mut instance: ::protobuf::lazy::Lazy<ManualInteraction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ManualInteraction,
        };
        unsafe {
            instance.get(ManualInteraction::new)
        }
    }
}

impl ::protobuf::Clear for ManualInteraction {
    fn clear(&mut self) {
        self.description.clear();
        self.field_type.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ManualInteraction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ManualInteraction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JobResult {
    // message fields
    pub unique_id: u32,
    pub failed: bool,
    pub exit_pipeline: bool,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JobResult {
    fn default() -> &'a JobResult {
        <JobResult as ::protobuf::Message>::default_instance()
    }
}

impl JobResult {
    pub fn new() -> JobResult {
        ::std::default::Default::default()
    }

    // uint32 unique_id = 1;


    pub fn get_unique_id(&self) -> u32 {
        self.unique_id
    }
    pub fn clear_unique_id(&mut self) {
        self.unique_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_unique_id(&mut self, v: u32) {
        self.unique_id = v;
    }

    // bool failed = 2;


    pub fn get_failed(&self) -> bool {
        self.failed
    }
    pub fn clear_failed(&mut self) {
        self.failed = false;
    }

    // Param is passed by value, moved
    pub fn set_failed(&mut self, v: bool) {
        self.failed = v;
    }

    // bool exit_pipeline = 3;


    pub fn get_exit_pipeline(&self) -> bool {
        self.exit_pipeline
    }
    pub fn clear_exit_pipeline(&mut self) {
        self.exit_pipeline = false;
    }

    // Param is passed by value, moved
    pub fn set_exit_pipeline(&mut self, v: bool) {
        self.exit_pipeline = v;
    }

    // string message = 4;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for JobResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.unique_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.failed = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.exit_pipeline = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.unique_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.unique_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.failed != false {
            my_size += 2;
        }
        if self.exit_pipeline != false {
            my_size += 2;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.unique_id != 0 {
            os.write_uint32(1, self.unique_id)?;
        }
        if self.failed != false {
            os.write_bool(2, self.failed)?;
        }
        if self.exit_pipeline != false {
            os.write_bool(3, self.exit_pipeline)?;
        }
        if !self.message.is_empty() {
            os.write_string(4, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JobResult {
        JobResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "unique_id",
                    |m: &JobResult| { &m.unique_id },
                    |m: &mut JobResult| { &mut m.unique_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "failed",
                    |m: &JobResult| { &m.failed },
                    |m: &mut JobResult| { &mut m.failed },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "exit_pipeline",
                    |m: &JobResult| { &m.exit_pipeline },
                    |m: &mut JobResult| { &mut m.exit_pipeline },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    |m: &JobResult| { &m.message },
                    |m: &mut JobResult| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<JobResult>(
                    "JobResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static JobResult {
        static mut instance: ::protobuf::lazy::Lazy<JobResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const JobResult,
        };
        unsafe {
            instance.get(JobResult::new)
        }
    }
}

impl ::protobuf::Clear for JobResult {
    fn clear(&mut self) {
        self.unique_id = 0;
        self.failed = false;
        self.exit_pipeline = false;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JobResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Empty {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Empty {
    fn default() -> &'a Empty {
        <Empty as ::protobuf::Message>::default_instance()
    }
}

impl Empty {
    pub fn new() -> Empty {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Empty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Empty {
        Empty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<Empty>(
                    "Empty",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Empty {
        static mut instance: ::protobuf::lazy::Lazy<Empty> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Empty,
        };
        unsafe {
            instance.get(Empty::new)
        }
    }
}

impl ::protobuf::Clear for Empty {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Empty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Empty {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cplugin.proto\x12\x05proto\"\xd9\x01\n\x03Job\x12\x1b\n\tunique_id\
    \x18\x01\x20\x01(\rR\x08uniqueId\x12\x14\n\x05title\x18\x02\x20\x01(\tR\
    \x05title\x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\x0bdescription\
    \x12\x1c\n\tdependson\x18\x04\x20\x03(\rR\tdependson\x12#\n\x04args\x18\
    \x05\x20\x03(\x0b2\x0f.proto.ArgumentR\x04args\x12:\n\x0binteraction\x18\
    \x06\x20\x01(\x0b2\x18.proto.ManualInteractionR\x0binteraction\"h\n\x08A\
    rgument\x12\x20\n\x0bdescription\x18\x01\x20\x01(\tR\x0bdescription\x12\
    \x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12\x10\n\x03key\x18\x03\x20\
    \x01(\tR\x03key\x12\x14\n\x05value\x18\x04\x20\x01(\tR\x05value\"_\n\x11\
    ManualInteraction\x12\x20\n\x0bdescription\x18\x01\x20\x01(\tR\x0bdescri\
    ption\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12\x14\n\x05value\
    \x18\x03\x20\x01(\tR\x05value\"\x7f\n\tJobResult\x12\x1b\n\tunique_id\
    \x18\x01\x20\x01(\rR\x08uniqueId\x12\x16\n\x06failed\x18\x02\x20\x01(\
    \x08R\x06failed\x12#\n\rexit_pipeline\x18\x03\x20\x01(\x08R\x0cexitPipel\
    ine\x12\x18\n\x07message\x18\x04\x20\x01(\tR\x07message\"\x07\n\x05Empty\
    2[\n\x06Plugin\x12%\n\x07GetJobs\x12\x0c.proto.Empty\x1a\n.proto.Job0\
    \x01\x12*\n\nExecuteJob\x12\n.proto.Job\x1a\x10.proto.JobResultB%\n\x15i\
    o.gaiapipeline.protoB\nGRPCPluginP\x01J\xe7\x10\n\x06\x12\x04\x05\0:\x01\
    \n\xaf\x01\n\x01\x0c\x12\x03\x05\0\x122\xa4\x01\x20plugin.proto\n\x20Def\
    ines\x20the\x20gRPC\x20interface\x20between\x20gaia\x20and\x20the\x20use\
    r\x20defined\n\x20pipelines\x20(plugins).\x20All\x20rpc\x20Methods\x20ar\
    e\x20called\x20from\x20Gaia\x20and\n\x20executed\x20in\x20the\x20plugin.\
    \n\n\x08\n\x01\x08\x12\x03\x07\0\"\n\t\n\x02\x08\n\x12\x03\x07\0\"\n\x08\
    \n\x01\x08\x12\x03\x08\0.\n\t\n\x02\x08\x01\x12\x03\x08\0.\n\x08\n\x01\
    \x08\x12\x03\t\0+\n\t\n\x02\x08\x08\x12\x03\t\0+\n\x08\n\x01\x02\x12\x03\
    \x0b\0\x0e\n)\n\x02\x04\0\x12\x04\x0e\0\x15\x01\x1a\x1d\x20Job\x20repres\
    ents\x20a\x20single\x20job\n\n\n\n\x03\x04\0\x01\x12\x03\x0e\x08\x0b\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x0f\x04(\n\r\n\x05\x04\0\x02\0\x04\x12\
    \x04\x0f\x04\x0e\r\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0f\x04\n\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x0f\x18!\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x0f&'\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x10\x04(\n\r\n\x05\x04\0\
    \x02\x01\x04\x12\x04\x10\x04\x0f(\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x10\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x10\x18\x1d\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x10&'\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x11\
    \x04(\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x11\x04\x10(\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03\x11\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x11\
    \x18#\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x11&'\n\x0b\n\x04\x04\0\x02\
    \x03\x12\x03\x12\x04(\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x12\x04\x0c\
    \n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x12\r\x13\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\x12\x18!\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x12&'\n\
    \x0b\n\x04\x04\0\x02\x04\x12\x03\x13\x04(\n\x0c\n\x05\x04\0\x02\x04\x04\
    \x12\x03\x13\x04\x0c\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\x13\r\x15\n\
    \x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x13\x18\x1c\n\x0c\n\x05\x04\0\x02\
    \x04\x03\x12\x03\x13&'\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x14\x04(\n\r\n\
    \x05\x04\0\x02\x05\x04\x12\x04\x14\x04\x13(\n\x0c\n\x05\x04\0\x02\x05\
    \x06\x12\x03\x14\x04\x15\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x14\x18#\
    \n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x14&'\no\n\x02\x04\x01\x12\x04\
    \x19\0\x1e\x01\x1ac\x20Argument\x20represents\x20an\x20argument\x20passe\
    d\x20from\x20a\x20pipeline\n\x20to\x20gaia\x20and/or\x20from\x20gaia\x20\
    to\x20the\x20pipeline.\n\n\n\n\x03\x04\x01\x01\x12\x03\x19\x08\x10\n\x0b\
    \n\x04\x04\x01\x02\0\x12\x03\x1a\x04\x1b\n\r\n\x05\x04\x01\x02\0\x04\x12\
    \x04\x1a\x04\x19\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1a\x04\n\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1a\x0b\x16\n\x0c\n\x05\x04\x01\x02\
    \0\x03\x12\x03\x1a\x19\x1a\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x1b\x04\
    \x1b\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x1b\x04\x1a\x1b\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\x1b\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x1b\x0b\x0f\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1b\x19\x1a\
    \n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x1c\x04\x1b\n\r\n\x05\x04\x01\x02\
    \x02\x04\x12\x04\x1c\x04\x1b\x1b\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\
    \x1c\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x1c\x0b\x0e\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x03\x1c\x19\x1a\n\x0b\n\x04\x04\x01\x02\x03\
    \x12\x03\x1d\x04\x1b\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04\x1d\x04\x1c\
    \x1b\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x1d\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x03\x01\x12\x03\x1d\x0b\x10\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\
    \x03\x1d\x19\x1a\nE\n\x02\x04\x02\x12\x04!\0%\x01\x1a9\x20ManualInteract\
    ion\x20represents\x20a\x20manual\x20human\x20interaction\n\n\n\n\x03\x04\
    \x02\x01\x12\x03!\x08\x19\n\x0b\n\x04\x04\x02\x02\0\x12\x03\"\x04\x1b\n\
    \r\n\x05\x04\x02\x02\0\x04\x12\x04\"\x04!\x1b\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03\"\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\"\x0b\x16\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03\"\x19\x1a\n\x0b\n\x04\x04\x02\x02\
    \x01\x12\x03#\x04\x1b\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04#\x04\"\x1b\n\
    \x0c\n\x05\x04\x02\x02\x01\x05\x12\x03#\x04\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03#\x0b\x0f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03#\x19\
    \x1a\n\x0b\n\x04\x04\x02\x02\x02\x12\x03$\x04\x1b\n\r\n\x05\x04\x02\x02\
    \x02\x04\x12\x04$\x04#\x1b\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03$\x04\
    \n\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03$\x0b\x10\n\x0c\n\x05\x04\x02\
    \x02\x02\x03\x12\x03$\x19\x1a\n@\n\x02\x04\x03\x12\x04(\0-\x01\x1a4\x20J\
    obResult\x20represents\x20the\x20result\x20of\x20an\x20executed\x20job\n\
    \n\n\n\x03\x04\x03\x01\x12\x03(\x08\x11\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03)\x04\x1e\n\r\n\x05\x04\x03\x02\0\x04\x12\x04)\x04(\x13\n\x0c\n\x05\
    \x04\x03\x02\0\x05\x12\x03)\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03)\
    \x0b\x14\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03)\x1c\x1d\n\x0b\n\x04\x04\
    \x03\x02\x01\x12\x03*\x04\x1e\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04*\x04\
    )\x1e\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03*\x04\x08\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x03*\x0b\x11\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03*\x1c\x1d\n\x0b\n\x04\x04\x03\x02\x02\x12\x03+\x04\x1e\n\r\n\x05\x04\
    \x03\x02\x02\x04\x12\x04+\x04*\x1e\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\
    \x03+\x04\x08\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03+\x0b\x18\n\x0c\n\
    \x05\x04\x03\x02\x02\x03\x12\x03+\x1c\x1d\n\x0b\n\x04\x04\x03\x02\x03\
    \x12\x03,\x04\x1e\n\r\n\x05\x04\x03\x02\x03\x04\x12\x04,\x04+\x1e\n\x0c\
    \n\x05\x04\x03\x02\x03\x05\x12\x03,\x04\n\n\x0c\n\x05\x04\x03\x02\x03\
    \x01\x12\x03,\x0b\x12\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03,\x1c\x1d\n\
    \x1a\n\x02\x04\x04\x12\x030\0\x10\x1a\x0f\x20Empty\x20message\n\n\n\n\
    \x03\x04\x04\x01\x12\x030\x08\r\n\n\n\x02\x06\0\x12\x042\0:\x01\n\n\n\
    \x03\x06\0\x01\x12\x032\x08\x0e\nU\n\x04\x06\0\x02\0\x12\x035\x04,\x1aH\
    \x20GetJobs\x20returns\x20a\x20stream\x20of\x20Job\x20objects.\n\x20Used\
    \x20to\x20expose\x20jobs\x20to\x20gaia.\n\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x035\x08\x0f\n\x0c\n\x05\x06\0\x02\0\x02\x12\x035\x10\x15\n\x0c\n\
    \x05\x06\0\x02\0\x06\x12\x035\x20&\n\x0c\n\x05\x06\0\x02\0\x03\x12\x035'\
    *\np\n\x04\x06\0\x02\x01\x12\x039\x04,\x1ac\x20ExecuteJob\x20signals\x20\
    the\x20plugin\x20to\x20execute\x20the\x20given\x20job.\n\x20Used\x20to\
    \x20execute\x20one\x20job\x20from\x20a\x20pipeline.\n\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x039\x08\x12\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x039\x13\
    \x16\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x039!*b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
